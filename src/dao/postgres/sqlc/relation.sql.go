// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: relation.sql

package db

import (
	"context"
)

const createRelations = `-- name: CreateRelations :one

insert into relationship (fid, tid, relation_type)
values ($1, $2, $3) returning fid, tid, relation_type
`

type CreateRelationsParams struct {
	Fid          int64        `json:"fid"`
	Tid          int64        `json:"tid"`
	RelationType Relationtype `json:"relation_type"`
}

func (q *Queries) CreateRelations(ctx context.Context, arg *CreateRelationsParams) (*Relationship, error) {
	row := q.db.QueryRow(ctx, createRelations, arg.Fid, arg.Tid, arg.RelationType)
	var i Relationship
	err := row.Scan(&i.Fid, &i.Tid, &i.RelationType)
	return &i, err
}

const getAllRelations = `-- name: GetAllRelations :many
select fid, tid, relation_type
from relationship
where fid = $1
`

func (q *Queries) GetAllRelations(ctx context.Context, fid int64) ([]*Relationship, error) {
	rows, err := q.db.Query(ctx, getAllRelations, fid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Relationship{}
	for rows.Next() {
		var i Relationship
		if err := rows.Scan(&i.Fid, &i.Tid, &i.RelationType); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRelationType = `-- name: GetRelationType :one
select fid, tid, relation_type
from relationship
where fid = $1
  and tid = $2
`

type GetRelationTypeParams struct {
	Fid int64 `json:"fid"`
	Tid int64 `json:"tid"`
}

func (q *Queries) GetRelationType(ctx context.Context, arg *GetRelationTypeParams) (*Relationship, error) {
	row := q.db.QueryRow(ctx, getRelationType, arg.Fid, arg.Tid)
	var i Relationship
	err := row.Scan(&i.Fid, &i.Tid, &i.RelationType)
	return &i, err
}

const updateRelationType = `-- name: UpdateRelationType :exec
update relationship
set relation_type = $1
where fid = $2
  and tid = $3
`

type UpdateRelationTypeParams struct {
	RelationType Relationtype `json:"relation_type"`
	Fid          int64        `json:"fid"`
	Tid          int64        `json:"tid"`
}

func (q *Queries) UpdateRelationType(ctx context.Context, arg *UpdateRelationTypeParams) error {
	_, err := q.db.Exec(ctx, updateRelationType, arg.RelationType, arg.Fid, arg.Tid)
	return err
}
