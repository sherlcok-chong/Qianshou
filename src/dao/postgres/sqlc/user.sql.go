// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: user.sql

package db

import (
	"context"
)

const createUsers = `-- name: CreateUsers :one
insert into "user" (name, user_type)
values ($1, $2) returning id, name, user_type
`

type CreateUsersParams struct {
	Name     string   `json:"name"`
	UserType Usertype `json:"user_type"`
}

func (q *Queries) CreateUsers(ctx context.Context, arg *CreateUsersParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUsers, arg.Name, arg.UserType)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.UserType)
	return &i, err
}

const getAllUser = `-- name: GetAllUser :many
select id, name, user_type
from "user"
`

func (q *Queries) GetAllUser(ctx context.Context) ([]*User, error) {
	rows, err := q.db.Query(ctx, getAllUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name, &i.UserType); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
